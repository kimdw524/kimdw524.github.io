{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"750e6519-1c88-5346-9b6b-f79e4147f45c","excerpt":"jsdom 환경에서 정의된 window는 브라우저의 Window 객체가 아니라, 테스트를 목적으로 별도로 구현된 객체입니다. 만약 아래와 같은 코드가 있을 때, element에 window를 대입하면 조건문을 통과할 수 없습니다. 해결법 window 객체의 프로토타입을 Window.prototype으로 변경하면 됩니다. 더 알아보기 instanceof의 동작 원리  연산자는 의 프로토타입 체인에 이 존재하는지 판별합니다. 직접 구현한 instanceof Reference 해결법 (https://github.com/jsdom…","frontmatter":{"date":"2025-05-18 00:09:00","title":"jest + jsdom 환경에서 window instanceof Window","slug":"jsdom-window","tags":["JavaScript","Jest"]}}},{"node":{"id":"1f8f61a7-0efd-52d2-b596-e57e3e081ac1","excerpt":"문제 상황 위와 같은 코드에서  를 호출했을 때 box의 background-color가 어떻게 변화될까요? 개발자는 red → blue로 transition이 일어나는 걸 의도했겠지만 결과는 아래와 같이 green → blue로 transition이 됩니다. 1.gif 의도한 것과 결과가 다른 이유 JavaScript로 element의 style을 변경해도 즉시 적용되지 않습니다. 브라우저는 JavaScript…","frontmatter":{"date":"2025-02-23 23:50:00","title":"transition이 발생하지 않는 이유","slug":"trigger-transition","tags":["JavaScript","CSS","Browser"]}}},{"node":{"id":"952dcaa3-5cd4-53b4-a831-2ec87f9fa3f8","excerpt":"쌓임 맥락 (stacking context) 사람: DA WOON KIM\n생성 일시: 2025년 2월 17일 오전 3:51 01.webm 02.webm 가 적용된 navbar를 사용하다보면 ,  등 특정 css가 적용된 요소들이 navbar 위에 배치되는 현상이 있습니다. navbar에 를 정의하면 간단하게 해결할 수 있지만 왜 이런 현상이 생기는 걸까요? 그 이유는 stacking context와 관련되어 있습니다. stacking context 요소들이 화면에 쌓이는 순서(Z…","frontmatter":{"date":"2025-02-17 03:54:00","title":"쌓임 맥락 (stacking context)","slug":"stacking-context","tags":["CSS"]}}},{"node":{"id":"c4fb50e2-c67d-571e-9faa-09e0629d8d57","excerpt":"1.webm 최근에 암호화폐 실시간 시세를 보여주는 사이트를 만들고 있는데, TPS가 500 이상 치솟는 경우가 많다. 당연히, 최적화를 하지 않으면 성능적으로 문제가 발생할 거라 생각했고 실제로 어느정도 차이가 나는지 궁금하여 이를 확인하기 위해 간단한 실험을 하였다. 6.5초 동안 3000번의 업데이트가 발생할 때, 어느 정도 시간이 소요되는지 로직을 차례대로 개선하면서 확인한다. (Chrome DevTools Performance 패널을 통해 런타임 성능을 분석하였으며, Production mode…","frontmatter":{"date":"2025-01-28 02:14:00","title":"잦은 렌더링이 불가피할 때 최적화하기 (실시간 시세)","slug":"optimize-ticker","tags":["React"]}}},{"node":{"id":"9d6cadcd-fa33-5892-9109-deeb1114c99f","excerpt":"+  환경에서 React 라이브러리를 개발하고 배포까지 하는 과정  프로젝트 만들기 라이브러리 개발에 필요한 의존성을 추가하여 프로젝트를 구성한다. 주의할 점은 개발 환경에만 필요한 패키지는 devDependencies에 추가해야 배포할 때 불필요한 의존성을 쉽게 제거할 수 있다. package.json 설정 name  와 같이 scope를 사용할 수 있는데, scope는 자신의 아이디 또는 organization만 사용할 수 있다. https://docs.npmjs.com/about-scopes version version…","frontmatter":{"date":"2025-01-06 02:14:00","title":"npm 라이브러리 개발부터 배포까지","slug":"npm-publish","tags":["JavaScript"]}}},{"node":{"id":"3f5d63bc-a1a4-5733-9f9d-f642c2b9dc14","excerpt":"의도적으로 클릭 관련 스타일을 모두 없애도, 버튼을 클릭하는 순간 이 발생한다. 위와 같은 코드를 작성하고 버튼을 클릭하고 Performance 탭을 보면 결과는 아래와 같다.  버튼을 클릭하면 이 발생하는 걸 볼 수 있다. 발생 시점이 특이한데 Promise 이후, requestAnimationFrame 이전이다.","frontmatter":{"date":"2024-12-30 02:41:00","title":"버튼을 클릭하면 즉시 recalculate style이 발생한다.","slug":"click-recalculate-style","tags":["Browser"]}}}]}}}